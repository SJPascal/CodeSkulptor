# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 15 #I changed the ball radius, I thought is was too big.#
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
score1 = 0
score2 = 0
# initialize ball_pos and ball_vel for new ball in middle of table
ball_pos = [WIDTH / 2,  HEIGHT / 2]
ball_vel = [0,1]

RIGHT_SIDE = WIDTH - PAD_WIDTH - BALL_RADIUS
LEFT_SIDE = PAD_WIDTH + BALL_RADIUS





# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH / 2 , HEIGHT / 2]
    horizontal = random.randrange(120, 240) / 100
    vertical = random.randrange(60, 180) / 100
    
    if direction == RIGHT:
        ball_vel = [horizontal, -vertical]
    elif direction == LEFT:
        ball_vel = [-horizontal,-vertical]
    
    

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(0)
    paddle1_pos = [PAD_WIDTH, PAD_HEIGHT]
    paddle2_pos = [WIDTH - PAD_WIDTH, PAD_HEIGHT]
    paddle1_pos = HEIGHT/2
    paddle1_vel = 0
    paddle2_pos = HEIGHT/2
    paddle2_vel = 0
    
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    
    
    
    
def draw(canvas):
    global RIGHT_SIDE, LEFT_SIDE, score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, BALL_RADIUS
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "Red")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "Blue")
    canvas.draw_text("Pascal", [255, 210], 30, "cyan", "sans-serif") 
    
    # draw scores
    canvas.draw_text("Red: " + str(score1), [100,50], 30,"RED")
    canvas.draw_text("VS" , [280, 50],30,"green")
    canvas.draw_text("Blue: " + str(score2), [400,50], 30,"BLUE")
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    if ball_pos[1] - BALL_RADIUS <= 0 or ball_pos[1] + BALL_RADIUS >= HEIGHT:
        ball_vel[1] = -ball_vel[1] 
        
    # draw ball
    canvas.draw_circle([WIDTH/2,HEIGHT/2], 50, 3, 'grey')
    canvas.draw_circle(ball_pos, BALL_RADIUS, 3, 'green', 'white')
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos <=  HALF_PAD_HEIGHT:
        paddle1_pos =  HALF_PAD_HEIGHT
    if paddle2_pos <=  HALF_PAD_HEIGHT:    
        paddle2_pos =  HALF_PAD_HEIGHT

    if paddle1_pos >= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT
    if paddle2_pos >= HEIGHT - HALF_PAD_HEIGHT:    
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT
    
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    # draw paddles
    canvas.draw_line([HALF_PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT], [HALF_PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT], PAD_WIDTH, "Red")
    canvas.draw_line([WIDTH - HALF_PAD_WIDTH, paddle2_pos + HALF_PAD_HEIGHT], [WIDTH - HALF_PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT], PAD_WIDTH, "BlUE")
    # determine whether paddle and ball collide    
   
    if ball_pos[0] - BALL_RADIUS <= PAD_WIDTH: 
        ball_vel[0] -= ball_vel[0] * 2.2
        if  ball_pos[1] >= paddle1_pos + HALF_PAD_HEIGHT or ball_pos[1] <= paddle1_pos - HALF_PAD_HEIGHT:
            score2 += 1
            spawn_ball(RIGHT)
    elif ball_pos[0] - BALL_RADIUS <= PAD_WIDTH:
        ball_vel[0] -= ball_vel[0] + 5
            
        
    if ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        ball_vel [0] -= ball_vel[0] * 2.2
        if ball_pos[1] >= paddle2_pos + HALF_PAD_HEIGHT or ball_pos[1] <= paddle2_pos - HALF_PAD_HEIGHT:
            score1 += 1
            spawn_ball(LEFT)
    elif ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        ball_vel[0] -= ball_vel[0] +5
        
    
    
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    add = 4
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= add
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel += add
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= add
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += add
        
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    add = 0
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = add
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = add
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = add
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = add

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)



# start frame
new_game()
frame.start()
